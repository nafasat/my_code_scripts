#!/usr/bin/python3

"""
Problem 12
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

"""


class Solutions:

    def __init__(self, inputnum):
        self.List = []
        self.NewList = []
        self.inputnum = inputnum

    def get_triangle(self):
        index = 1
        while index <= self.inputnum:
            self.List.append(index)
            index += 1

        return self.List

    def triangle(self):
        count = 0
        while count < len(self.List):
            if count == 0:
                self.NewList.append(self.List[count])
            else:
                self.NewList.append(self.List[count] + sum(self.List[:count]))

            count += 1

        return self.NewList

    def listfactors(self):
        factors = {}
        for i in self.NewList:
            factor_list = []
            for j in range(1, i + 1):
                if i % j == 0:
                    factor_list.append(j)

            factors[i] = factor_list

        return factors


a = Solutions(7)
total = sum(a.get_triangle())
a.triangle()
Dict_output = a.listfactors()
for key in Dict_output.keys():
    print("%-4s : %-8s" % (key, Dict_output[key]))
